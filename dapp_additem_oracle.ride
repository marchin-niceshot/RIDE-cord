{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
let NONE = "none"

let VOTERS = 3 
let QUORUM = 2

let VOTING = "voting"
let REVEAL = "reveal"
let FEATURED = "featured"
let DELISTED = "delisted"

func getNumberByKey(key : String) = {
    let num = match getInteger(this, key) {
            case a:Int => a
            case _ => 0 
    }     
    num
}
    
func getStrByKey (key : String) = {
    let str = match getString(this, key){
        case a: String => a
        case _ => NONE
    }
    str
}

func getKeyItemPrice (item : String) = {
    item + "_price"
}

func getValueItemPrice (item : String) = {
    getNumberByKey(getKeyItemPrice(item))
}

func getKeyUserItemCounter( user : String, item : String) = {
    item + "_" + user + "_cnt"
}

func getValueUserItemCounter( user : String, item : String) = {
    getNumberByKey(getKeyUserItemCounter(user, item))
} 

func getKeyItem( supplier : String, title : String) = {
    "item_" + toBase58String(sha256(toBytes(supplier+title)))
}

func getKeyItemData( item : String) = {
    item + "_data"
}

func getKeyItemSupplier( item : String) = {
    item + "_owner"
}

func getValueItemSupplier( item : String) = {
    getStrByKey(getKeyItemSupplier(item))
}

func getKeyBalanceSupplier( account : String) = {
    account + "_balanace"
}

func getValueBalanceSupplier ( account : String) = {
    getNumberByKey(getKeyBalanceSupplier(account))
}

#Comment : Commit - Reveal Voting Keys : 

func getKeyCommit(item: String, user: String) = {
    item +  "_" + user + "_commit"
}

func getValueCommit(item : String, user: String) = {
    getStrByKey(getKeyCommit(item, user))
}

func getKeyCommitsCount(item: String) = {
    item + "_comcnt"
}

func getValueCommitsCount (item: String) = {
    getNumberByKey(getKeyCommitsCount(item))
}

func getKeyReveal(item : String, user: String) = {
    item + "_" + user + "_reveal"
}

func getValueReveal(item : String, user: String) = {
    getStrByKey(getKeyReveal(item, user))
}

func getKeyItemStatus(item: String) = {
    item + "_status"
}

func getValueItemStatus(item: String) = {
      getStrByKey(getKeyItemStatus(item))
}

func getKeyVoteCount(item : String, vote: String) = {
    item + "_res:" + vote
}

func getValueVoteCount(item: String, vote: String) = {
    getNumberByKey(getKeyVoteCount(item, vote))
}

func getExtAddressOracle() = {
    extract(addressFromString("3MvxG7PEiAW4NfKByTSAXnDnawTVZ2A6433"))
}
let BLACKLISTED = "blacklist"

func getExtKeyItemWhiteListStatus(account: String) = {
    account + "_verifier_status"
}
func getExtValueItemWhiteListStatus(oracle: Address, account: String) = {
    let str = match getString(oracle, getExtKeyItemWhiteListStatus(account)){
            case a:String => a
            case _ => NONE
    }
    str
}

@Callable(i)
func addItem(title : String, price : Int, data : String ) = {
    let supplierAddress = toBase58String(i.caller.bytes)
    let item = getKeyItem(supplierAddress, title)
    let supplierwhitelist = getExtValueItemWhiteListStatus(getExtAddressOracle(), supplierAddress)
    if ( price <= 0) then throw("purchase ammount cannnot be less than item price")
    else if ( getValueItemSupplier(item) != NONE ) then throw("an item is already exist")
    else if (supplierwhitelist == BLACKLISTED) then throw("supplier's account has been blacklisted")
    else {
        WriteSet([
            DataEntry(getKeyItemSupplier(item),supplierAddress),
            DataEntry(getKeyItemPrice(item), price),
            DataEntry(getKeyItemData(item), data),
            DataEntry(getExtKeyItemWhiteListStatus(supplierAddress),supplierwhitelist)
        ])
    }
}